def createVersion() {
    // 定义一个版本号作为当次构建的版本,输出结果为jenkins-分支-日期-buildid
    return "jenkins" + "-${branch_of_tag_name}-" + new  Date().format('yyyyMMddHHmm') + "-${env.BUILD_ID}"
}

pipeline {

    agent any
    
    environment {
        version = createVersion()
    }

    stages {
        stage('Code Checkout') {
            // 拉取代码
            when {
            expression { params.deploy_mode ==~ /(Release|BuildImage)/ }
            }
            steps {
                script {
                    dir('build') {
                        // 清理当前工作目录
                        sh "rm -rf ./*"
                        if (params.checkout_type == "branch") {
                            git branch: '$branch_of_tag_name', credentialsId: 'mlw', url: '$git_url'} else {
                            git url: '$git_url', credentialsId: 'mlw'
                            sh "git checkout $branch_of_tag_name"
                            }
                        }
                    }
                }
            }
        
        stage('Maven Build') {
            // 代码maven构建
            when {
                expression { params.deploy_mode ==~ /(Release|BuildImage)/ }
            }
            steps {
                dir('build') {
                    sh """
                    mvn clean install -Dfile.encoding=UTF-8 -DskipTests=true
                    """
                }
            }
        }
        
        stage('Docker Image Build') {
            // docker镜像打包
            when {
                expression { params.deploy_mode ==~ /(Release|BuildImage)/ }
            }
            steps {
                script {
                    dir('docker_build') {
                        // 清理当前工作目录
                        sh "rm -rf ./*"
                        //拷贝部署文件
                        sh """
                        cp ../build/$target_file ./
                        unzip -o $target_file
                        """
                        // 拉取Dockerfile模板
                        git branch: 'master', credentialsId: 'mlw', url: '$k8s_templates_git_url'
                        sh "cp ./backend/datart/Dockerfile ./"
                        docker.withRegistry("http://${harbor_url}", "harbor") {
                            def dockerfile = 'Dockerfile'
                            def customImage = docker.build("smartdata-dev/${environment}/${app_name}:${version}", "--build-arg app_name=${app_name} --build-arg jar_file=${target_file} ./")
                            customImage.push()
                        }
                        // 镜像上传到镜像仓库后进行本地删除
                        sh """
                        docker rmi ${harbor_url}/smartdata-dev/${environment}/${app_name}:${version}
                        """
                    }
                }
            }
        }
        stage('k8s deploy') {
            // docker镜像打包
            when {
                expression { params.deploy_mode ==~ /(Release|Resource)/ }
            }
            steps {
                dir('k8s_deploy') {
                    // 拉取Dockerfile模板
                    git branch: 'master', credentialsId: 'mlw', url: '$k8s_templates_git_url'
                    sh """
                    cp ../build/config/$config_file ./$config_file
                    kubectl get configmap $app_name-config -n $environment || kubectl  create configmap $app_name-config --from-file=./$config_file -n $environment
                    cp backend/datart/deployment.tpl ./deployment.yml
                    if [ $deploy_mode == "Resource" ];then
                	    current_image_version=`kubectl get deployment $app_name '-o=jsonpath={\$.spec.template.spec.containers[:1].image}' -n $environment 2>/dev/null || echo "null"`
                        sed -i "s#{image_url}#\$current_image_version#g" deployment.yml
                    else
                        sed -i 's#{image_url}#$harbor_url/smartdata-dev/${environment}/$app_name:$version#g' deployment.yml
                    fi
                    sed -i 's#{namespace}#$environment#g' deployment.yml
                    sed -i 's#{app_name}#$app_name#g' deployment.yml
                    sed -i 's#{replicas}#$replicas#g' deployment.yml
                    sed -i 's#{java_opts}#$java_opts#g' deployment.yml
                    sed -i 's#{cpu_limit}#$cpu_limit#g' deployment.yml
                    sed -i 's#{memory_limit}#$memory_limit#g' deployment.yml
                    sed -i 's#{config_file}#$config_file#g' deployment.yml
                    kubectl apply -f deployment.yml
                    """
                    // 没有则创建service
                    sh """
                    cp backend/service.tpl ./service.yml
                    sed -i 's#{namespace}#$environment#g' service.yml
                    sed -i 's#{app_name}#$app_name#g' service.yml
                    kubectl get service $app_name -n $environment || kubectl apply -f service.yml
                    """
                }
            }
        }
    }
}
